{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","items","useState","inputText","setInputText","listItems","map","item","className","done","key","type","name","id","isEditing","checked","onChange","markAsDone","text","value","event","target","onClick","saveItem","icon","cancelEdit","editItem","deleteItem","duration","easing","library","add","faTrash","faEdit","faSave","faTimes","App","state","currentItem","textInput","React","createRef","handleInput","bind","addItem","e","this","setState","Date","now","preventDefault","newItem","console","log","newItems","current","focus","newText","updatedItems","prevState","filteredItems","filter","Fragment","onSubmit","placeholder","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65b24214.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ListItem.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nexport default function ListItem(props) {\r\n  const items = props.items;\r\n  let [inputText, setInputText] = useState(\"\");\r\n  const listItems = items.map(item => {\r\n    return (\r\n      // <div\r\n      //   className={item.done ? \"list-item checked\" : \"list-item\"}\r\n      //   key={item.key}\r\n      // >\r\n      //   <p>\r\n      //     <span>\r\n      //       <input\r\n      //         type='checkbox'\r\n      //         name='done'\r\n      //         id='done'\r\n      //         checked={item.done}\r\n      //         onChange={() => {\r\n      //           props.markAsDone(item);\r\n      //         }}\r\n      //       />\r\n      //     </span>\r\n      //     {item.text}\r\n      //     <span\r\n      //       className='delete'\r\n      //       onClick={() => {\r\n      //         props.deleteItem(item.key);\r\n      //       }}\r\n      //     >\r\n      //       <FontAwesomeIcon\r\n      //         className='fa-icons'\r\n      //         icon='trash'\r\n      //       ></FontAwesomeIcon>\r\n      //     </span>\r\n      //   </p>\r\n      // </div>\r\n      <div\r\n        className={item.done ? \"todo-item checked\" : \"todo-item\"}\r\n        key={item.key}\r\n      >\r\n        <input\r\n          type='checkbox'\r\n          name='done'\r\n          id='done'\r\n          className={item.isEditing ? \"hidden\" : \"done\"}\r\n          checked={item.done}\r\n          onChange={() => {\r\n            props.markAsDone(item);\r\n          }}\r\n        />\r\n        <p className={item.isEditing ? \"hidden\" : null}>{item.text}</p>\r\n        <input\r\n          className={item.isEditing ? \"editInput\" : \"editInput hidden\"}\r\n          type='text'\r\n          value={inputText}\r\n          onChange={event => {\r\n            setInputText(event.target.value);\r\n          }}\r\n        />\r\n        <div className='btns-wrap'>\r\n          <button\r\n            type='button'\r\n            className={item.isEditing ? \"save\" : \"hidden save\"}\r\n            onClick={() => {\r\n              props.saveItem(item.key, inputText);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon\r\n              className='fa-icons save-icon'\r\n              icon='save'\r\n            ></FontAwesomeIcon>\r\n          </button>\r\n          <button\r\n            type='button'\r\n            className={item.isEditing ? \"cancel\" : \"hidden cancel\"}\r\n            onClick={() => {\r\n              props.cancelEdit(item.key);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon\r\n              className='fa-icons cancel-icon'\r\n              icon='times'\r\n            ></FontAwesomeIcon>\r\n          </button>\r\n          <button\r\n            type='button'\r\n            className={item.isEditing ? \"hidden edit\" : \"edit\"}\r\n            onClick={() => {\r\n              props.editItem(item.key);\r\n              setInputText(item.text);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon\r\n              className='fa-icons edit-icon'\r\n              icon='edit'\r\n            ></FontAwesomeIcon>\r\n          </button>\r\n          <button\r\n            type='button'\r\n            className={item.isEditing ? \"hidden delete\" : \"delete\"}\r\n            onClick={() => {\r\n              props.deleteItem(item.key);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon\r\n              className='fa-icons trash-icon'\r\n              icon='trash'\r\n            ></FontAwesomeIcon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <FlipMove duration={300} easing='ease-in-out'>\r\n        {listItems}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItem from \"./ListItem\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faTrash,\n  faEdit,\n  faSave,\n  faTimes\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash, faEdit, faSave, faTimes);\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n        isEditing: false,\n        done: false\n      }\n    };\n    this.textInput = React.createRef();\n\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.markAsDone = this.markAsDone.bind(this);\n    this.editItem = this.editItem.bind(this);\n    this.saveItem = this.saveItem.bind(this);\n    this.cancelEdit = this.cancelEdit.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n        isEditing: false,\n        done: false\n      }\n    });\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n          isEditing: false,\n          done: false\n        }\n      });\n    }\n    this.textInput.current.focus();\n  }\n\n  saveItem(key, newText) {\n    const updatedItems = this.state.items.map(item => {\n      if (item.key === key) {\n        return {\n          ...item,\n          text: newText,\n          isEditing: false\n        };\n      }\n      return item;\n    });\n    this.setState(prevState => ({\n      items: updatedItems\n    }));\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key;\n    });\n    this.setState({\n      items: filteredItems\n    });\n  }\n\n  editItem(key) {\n    const updatedItems = this.state.items.map(item => {\n      item.isEditing = false;\n      if (item.key === key) {\n        return {\n          ...item,\n          isEditing: !item.isEditing\n        };\n      }\n      return item;\n    });\n    this.setState(prevState => ({\n      items: updatedItems\n    }));\n  }\n\n  cancelEdit(key) {\n    const updatedItems = this.state.items.map(item => {\n      if (item.key === key) {\n        return {\n          ...item,\n          isEditing: false\n        };\n      }\n      return item;\n    });\n    this.setState(prevState => ({\n      items: updatedItems\n    }));\n  }\n\n  markAsDone({ key }) {\n    const updatedItems = this.state.items.map(item => {\n      if (item.key === key) {\n        return {\n          ...item,\n          done: !item.done\n        };\n      }\n      return item;\n    });\n    this.setState(prevState => ({\n      items: updatedItems\n    }));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {/* <div className='app-header'>\n          <h3>Todo App</h3>\n        </div>\n        <div className='app-container'>\n          <div className='form-header'>\n            <form id='todo-form' onSubmit={this.addItem}>\n              <input\n                type='text'\n                placeholder='Enter Text'\n                ref={this.textInput}\n                value={this.state.currentItem.text}\n                onChange={this.handleInput}\n              />\n              <button type='submit'>ADD</button>\n            </form>\n          </div>\n          <ListItem\n            items={this.state.items}\n            deleteItem={this.deleteItem}\n            markAsDone={this.markAsDone}\n          ></ListItem>\n        </div> */}\n        <div className='container'>\n          <div className='header'>Simple Todo App</div>\n          <div className='add-todo'>\n            <form id='todo-form' onSubmit={this.addItem}>\n              <input\n                type='text'\n                placeholder='Enter Text'\n                ref={this.textInput}\n                value={this.state.currentItem.text}\n                onChange={this.handleInput}\n              />\n              <button type='submit'>ADD</button>\n            </form>\n          </div>\n          <div className='todo-container'>\n            <ListItem\n              items={this.state.items}\n              deleteItem={this.deleteItem}\n              markAsDone={this.markAsDone}\n              editItem={this.editItem}\n              saveItem={this.saveItem}\n              cancelEdit={this.cancelEdit}\n            ></ListItem>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}